desc: デバッグテクニックの例
vars:
  # デバッグ用のテストデータ
  complexData:
    users:
      - id: 1
        name: "Alice"
        scores: [85, 92, 78, 95]
        metadata:
          lastActive: "2024-02-01T10:00:00Z"
          tags: ["premium", "verified"]
      - id: 2
        name: "Bob"
        scores: [70, 65, 80, 75]
        metadata:
          lastActive: "2024-01-15T14:30:00Z"
          tags: ["standard"]
      - id: 3
        name: "Charlie"
        scores: [90, 88, 92, 94]
        metadata:
          lastActive: "2024-02-02T09:00:00Z"
          tags: ["premium", "beta-tester"]
  
  thresholds:
    passingScore: 80
    premiumMinScore: 85

steps:
  # 複雑な式の段階的確認
  debug_step_by_step:
    desc: 複雑な式を段階的に検証
    test: |
      // ステップ1: 生データの確認
      len(vars.complexData.users) == 3 &&
      vars.complexData.users[0].name == "Alice" &&
      len(vars.complexData.users[0].scores) == 4 &&
      // ステップ2: 平均値の計算
      sum(vars.complexData.users[0].scores) / len(vars.complexData.users[0].scores) == 87.5 &&
      sum(vars.complexData.users[1].scores) / len(vars.complexData.users[1].scores) == 72.5 &&
      sum(vars.complexData.users[2].scores) / len(vars.complexData.users[2].scores) == 91 &&
      // ステップ3: フィルタリング条件の確認
      (sum(vars.complexData.users[0].scores) / len(vars.complexData.users[0].scores)) >= vars.thresholds.passingScore &&
      (sum(vars.complexData.users[1].scores) / len(vars.complexData.users[1].scores)) < vars.thresholds.passingScore &&
      // ステップ4: 最終結果の名前リスト
      filter(vars.complexData.users, sum(.scores) / len(.scores) >= vars.thresholds.passingScore)[0].name == "Alice" &&
      filter(vars.complexData.users, sum(.scores) / len(.scores) >= vars.thresholds.passingScore)[1].name == "Charlie"

  # 条件式のデバッグ
  debug_conditions:
    desc: 複雑な条件式を部分的に検証
    test: |
      // 個別条件の確認
      "premium" in vars.complexData.users[0].metadata.tags &&
      "verified" in vars.complexData.users[0].metadata.tags &&
      !("beta-tester" in vars.complexData.users[0].metadata.tags) &&
      // 複合条件の確認
      ("premium" in vars.complexData.users[0].metadata.tags && 
       sum(vars.complexData.users[0].scores) / len(vars.complexData.users[0].scores) >= vars.thresholds.premiumMinScore) &&
      // カウントの確認
      len(filter(vars.complexData.users, "premium" in .metadata.tags)) == 2

  # エラーケースの特定
  debug_edge_cases:
    desc: エッジケースや異常値の検出
    test: |
      // 空配列のチェック
      len(filter(vars.complexData.users, len(.scores) == 0)) == 0 &&
      // null値のチェック（簡易版）
      vars.complexData.users[0].id != null &&
      vars.complexData.users[0].name != null &&
      // 範囲チェック（簡易版）
      min(vars.complexData.users[0].scores) >= 0 &&
      max(vars.complexData.users[0].scores) <= 100 &&
      // タグの存在確認
      len(vars.complexData.users[0].metadata.tags) > 0 &&
      len(vars.complexData.users[1].metadata.tags) > 0 &&
      len(vars.complexData.users[2].metadata.tags) > 0

  # 集計値の確認
  debug_aggregations:
    desc: 集計計算の中間結果を確認
    test: |
      // 全ユーザーのスコア合計
      sum(map(vars.complexData.users, sum(.scores))) == 1004 &&
      // 平均スコアが基準以上のユーザー数
      len(filter(vars.complexData.users, sum(.scores) / len(.scores) >= vars.thresholds.passingScore)) == 2 &&
      // 最高平均スコア
      max(map(vars.complexData.users, sum(.scores) / len(.scores))) == 91 &&
      // 最低平均スコア
      min(map(vars.complexData.users, sum(.scores) / len(.scores))) == 72.5

  # 複雑なマッピングのデバッグ
  debug_transformations:
    desc: データ変換の各段階を確認
    test: |
      // 名前のリスト化
      map(vars.complexData.users, .name)[0] == "Alice" &&
      map(vars.complexData.users, .name)[1] == "Bob" &&
      map(vars.complexData.users, .name)[2] == "Charlie" &&
      // スコア配列の長さ確認
      map(vars.complexData.users, len(.scores))[0] == 4 &&
      map(vars.complexData.users, len(.scores))[1] == 4 &&
      map(vars.complexData.users, len(.scores))[2] == 4
      // タグ数の合計確認（flattenサポートされていない）
      // len(flatten(map(vars.complexData.users, .metadata.tags))) == 5

  # パフォーマンスを考慮したデバッグ
  debug_performance:
    desc: 効率的な式の構築を確認
    test: |
      // 一度計算した値を再利用（実際の実装では変数に保存）
      len(filter(vars.complexData.users, sum(.scores) / len(.scores) >= vars.thresholds.passingScore)) == 2 &&
      // 短絡評価を活用
      (len(vars.complexData.users) > 0 && vars.complexData.users[0].name == "Alice") &&
      // 不要な計算を避ける
      (false || len(filter(vars.complexData.users, sum(.scores) > 1000)) == 0) == true