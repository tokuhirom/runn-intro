desc: APIレスポンスの検証例（モックデータを使用）
vars:
  # モックAPIレスポンスデータ
  mockResponses:
    userList:
      status: 200
      headers:
        content-type: "application/json"
        x-total-count: "45"
      body:
        data:
          - id: 1
            email: "alice@example.com"
            name: "Alice Johnson"
            role: "admin"
            active: true
            createdAt: "2024-01-15T10:00:00Z"
          - id: 2
            email: "bob@example.com"
            name: "Bob Smith"
            role: "user"
            active: true
            createdAt: "2024-01-16T14:30:00Z"
          - id: 3
            email: "charlie@example.com"
            name: "Charlie Brown"
            role: "user"
            active: false
            createdAt: "2024-01-17T09:15:00Z"
        pagination:
          page: 1
          limit: 10
          totalPages: 5
          totalItems: 45
    
    userDetail:
      status: 200
      body:
        id: 1
        email: "alice@example.com"
        profile:
          firstName: "Alice"
          lastName: "Johnson"
          avatar: "https://example.com/avatars/alice.jpg"
          bio: "Senior administrator with 5 years experience"
        permissions:
          - "users.read"
          - "users.write"
          - "users.delete"
          - "settings.manage"
    
    errorResponse:
      status: 404
      body:
        error:
          code: "USER_NOT_FOUND"
          message: "The requested user does not exist"
          details:
            userId: 999
            timestamp: "2024-01-20T15:30:00Z"

steps:
  # 基本的なレスポンス構造の検証
  validate_response_structure:
    desc: APIレスポンスの基本構造を検証
    test: |
      // ステータスコードの確認
      vars.mockResponses.userList.status == 200 &&
      // ヘッダーの確認
      vars.mockResponses.userList.headers["content-type"] == "application/json" &&
      vars.mockResponses.userList.headers["x-total-count"] == "45" &&
      // レスポンスボディの存在確認
      vars.mockResponses.userList.body != null &&
      "data" in vars.mockResponses.userList.body &&
      "pagination" in vars.mockResponses.userList.body

  # データフィールドの検証
  validate_data_fields:
    desc: 各データ要素の必須フィールドを確認
    test: |
      // 配列の長さ確認
      len(vars.mockResponses.userList.body.data) == 3 &&
      // 各要素の必須フィールド確認（簡易版）
      "id" in vars.mockResponses.userList.body.data[0] &&
      "email" in vars.mockResponses.userList.body.data[0] &&
      "name" in vars.mockResponses.userList.body.data[0] &&
      // IDの一意性確認（簡易版）
      len(map(vars.mockResponses.userList.body.data, .id)) == len(vars.mockResponses.userList.body.data)

  # ビジネスルールの検証
  validate_business_rules:
    desc: ビジネスロジックに基づいた検証
    test: |
      // 管理者は1人だけ
      len(filter(vars.mockResponses.userList.body.data, .role == "admin")) == 1 &&
      // すべてのメールアドレスが有効な形式（簡易チェック）
      len(vars.mockResponses.userList.body.data[0].email) > 0 &&
      len(vars.mockResponses.userList.body.data[1].email) > 0 &&
      len(vars.mockResponses.userList.body.data[2].email) > 0 &&
      // アクティブユーザーの割合
      len(filter(vars.mockResponses.userList.body.data, .active)) / len(vars.mockResponses.userList.body.data) >= 0.5

  # ページネーション情報の検証
  validate_pagination:
    desc: ページネーション情報の整合性確認
    test: |
      // 基本的な値の検証
      vars.mockResponses.userList.body.pagination.page > 0 &&
      vars.mockResponses.userList.body.pagination.limit > 0 &&
      vars.mockResponses.userList.body.pagination.totalPages > 0 &&
      vars.mockResponses.userList.body.pagination.totalItems >= 0 &&
      // 整合性の確認
      vars.mockResponses.userList.body.pagination.totalPages == ceil(vars.mockResponses.userList.body.pagination.totalItems / vars.mockResponses.userList.body.pagination.limit) &&
      vars.mockResponses.userList.body.pagination.page <= vars.mockResponses.userList.body.pagination.totalPages &&
      // 現在のページのアイテム数
      len(vars.mockResponses.userList.body.data) <= vars.mockResponses.userList.body.pagination.limit

  # ネストしたデータの検証
  validate_nested_data:
    desc: ユーザー詳細情報の検証
    test: |
      // プロフィール情報の検証
      vars.mockResponses.userDetail.body.profile.firstName != "" &&
      vars.mockResponses.userDetail.body.profile.lastName != "" &&
      len(vars.mockResponses.userDetail.body.profile.avatar) > 0 &&
      // 権限の検証
      len(vars.mockResponses.userDetail.body.permissions) >= 4 &&
      len(vars.mockResponses.userDetail.body.permissions[0]) > 0

  # エラーレスポンスの検証
  validate_error_response:
    desc: エラーレスポンスの構造確認
    test: |
      // エラーステータスコード
      vars.mockResponses.errorResponse.status >= 400 &&
      vars.mockResponses.errorResponse.status < 500 &&
      // エラー構造の検証
      "error" in vars.mockResponses.errorResponse.body &&
      vars.mockResponses.errorResponse.body.error.code != "" &&
      vars.mockResponses.errorResponse.body.error.message != "" &&
      // エラー詳細の存在確認
      "details" in vars.mockResponses.errorResponse.body.error

  # 条件付き検証
  conditional_validation:
    desc: 条件に基づいた検証
    test: |
      // 管理者には特別な検証
      (vars.mockResponses.userList.body.data[0].role != "admin" || vars.mockResponses.userList.body.data[0].id == 1) &&
      // 非アクティブユーザーの検証
      filter(vars.mockResponses.userList.body.data, !.active)[0].role != "admin"

  # データ集計と統計
  data_aggregation:
    desc: データの集計結果を検証
    test: |
      // 統計情報の計算と検証
      len(vars.mockResponses.userList.body.data) == 3 &&
      len(filter(vars.mockResponses.userList.body.data, .active)) == 2 &&
      // 平均IDの計算
      sum(map(vars.mockResponses.userList.body.data, .id)) / len(vars.mockResponses.userList.body.data) == 2 &&
      // ロール別カウント
      len(filter(vars.mockResponses.userList.body.data, .role == "admin")) == 1 &&
      len(filter(vars.mockResponses.userList.body.data, .role == "user")) == 2

  # 複合条件での検証
  complex_validation:
    desc: 複数の条件を組み合わせた検証
    test: |
      // アクティブな管理者が存在する
      any(vars.mockResponses.userList.body.data, .role == "admin" && .active) &&
      // すべてのユーザーIDが正の数
      vars.mockResponses.userList.body.data[0].id > 0 &&
      vars.mockResponses.userList.body.data[1].id > 0 &&
      vars.mockResponses.userList.body.data[2].id > 0 &&
      // 作成日時の形式（簡易チェック）
      len(vars.mockResponses.userList.body.data[0].createdAt) > 0 &&
      // メールアドレスのドメインチェック（簡易版）
      vars.mockResponses.userList.body.data[0].email == "alice@example.com" &&
      vars.mockResponses.userList.body.data[1].email == "bob@example.com" &&
      vars.mockResponses.userList.body.data[2].email == "charlie@example.com"