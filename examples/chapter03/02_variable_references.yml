desc: 変数参照の詳細な例
vars:
  # グローバル変数の定義
  baseURL: https://api.example.com
  apiVersion: v1
  testData:
    users:
      - id: 1
        name: Alice
        email: alice@example.com
        roles: ["admin", "user"]
      - id: 2
        name: Bob
        email: bob@example.com
        roles: ["user"]
      - id: 3
        name: Charlie
        email: charlie@example.com
        roles: ["user", "moderator"]
    config:
      timeout: 30
      retries: 3
      features:
        cache: true
        logging: false

steps:
  # varsへの基本的なアクセス
  access_vars_basic:
    desc: グローバル変数への基本アクセス
    test: |
      // 単純な変数
      vars.baseURL == "https://api.example.com" &&
      vars.apiVersion == "v1" &&
      // ネストした変数
      vars.testData.config.timeout == 30 &&
      vars.testData.config.features.cache == true &&
      // 配列へのアクセス
      vars.testData.users[0].name == "Alice" &&
      vars.testData.users[1].email == "bob@example.com" &&
      len(vars.testData.users) == 3

  # 環境変数へのアクセス
  access_env:
    desc: 環境変数の参照
    test: |
      // 環境変数は常に文字列として扱われる
      env.HOME != "" &&
      env.PATH != ""

  # 変数を使った計算
  calculate_values:
    desc: 変数を使った計算とフィルタリング
    test: |
      // 配列の長さ
      len(vars.testData.users) == 3 &&
      // フィルタリング
      len(filter(vars.testData.users, "admin" in .roles)) == 1 &&
      // 最初の管理者のメールアドレス
      filter(vars.testData.users, "admin" in .roles)[0].email == "alice@example.com" &&
      // 文字列操作
      upper(vars.testData.users[0].name) == "ALICE" &&
      // 文字列の結合
      vars.baseURL + "/" + vars.apiVersion == "https://api.example.com/v1"

  # ループ内でのインデックス変数
  loop_with_index:
    desc: ループインデックスの使用
    loop:
      count: len(vars.testData.users)
    test: |
      // iはループの現在のインデックス（0から始まる）
      i >= 0 &&
      i < len(vars.testData.users) &&
      vars.testData.users[i].id == i + 1 &&
      // 条件付き確認
      (i == 0 ? vars.testData.users[i].name == "Alice" : true) &&
      (i == 1 ? vars.testData.users[i].name == "Bob" : true) &&
      (i == 2 ? vars.testData.users[i].name == "Charlie" : true)

  # 複雑な式の組み合わせ
  complex_expressions:
    desc: 複数の変数と関数を組み合わせた式
    test: |
      // すべてのユーザーが有効なメールアドレスを持っているか
      all(vars.testData.users, .email != "") &&
      // 少なくとも1人の管理者がいるか
      any(vars.testData.users, "admin" in .roles) &&
      // ユーザーIDの合計
      sum(map(vars.testData.users, .id)) == 6 &&
      // 設定のキーの数
      len(keys(vars.testData.config)) == 3 &&
      // 機能の有効化状態
      vars.testData.config.features.cache == true &&
      vars.testData.config.features.logging == false

  # 変数スコープの確認
  scope_test:
    desc: 異なるスコープの変数アクセス
    loop:
      count: 1
    test: |
      // グローバル変数へのアクセス
      vars.apiVersion == "v1" &&
      // ループインデックス
      i == 0 &&
      // 環境変数
      env.PATH != ""