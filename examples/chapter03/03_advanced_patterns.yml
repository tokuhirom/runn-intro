desc: 高度な式パターンの例
vars:
  environment: staging
  products:
    - id: 1
      name: iPhone 15
      price: 999
      category: electronics
      stock: 50
      tags: ["smartphone", "apple", "5g"]
    - id: 2
      name: Programming Book
      price: 45
      category: books
      stock: 200
      tags: ["programming", "education", "beginner"]
    - id: 3
      name: MacBook Pro
      price: 2499
      category: electronics
      stock: 0
      tags: ["laptop", "apple", "professional"]
    - id: 4
      name: Coffee Mug
      price: 15
      category: accessories
      stock: 150
      tags: ["kitchen", "ceramic"]
    - id: 5
      name: Advanced Programming
      price: 75
      category: books
      stock: 30
      tags: ["programming", "education", "advanced"]

steps:
  # 三項演算子と条件式
  conditional_expressions:
    desc: 条件式の使用例
    test: |
      // 環境に応じたURL選択
      (vars.environment == "prod" ? "https://api.example.com" : "https://staging.example.com") == "https://staging.example.com" &&
      // デバッグモードの判定
      (vars.environment != "prod") == true &&
      // リトライ回数の設定
      (vars.environment == "prod" ? 5 : 3) == 3 &&
      // キャッシュの有効化判定
      (vars.environment == "prod" || vars.environment == "staging") == true

  # フィルタリングの高度な使用
  advanced_filtering:
    desc: 複雑なフィルタリング条件
    test: |
      // 高額商品のフィルタリング
      len(filter(vars.products, .price >= 100)) == 2 &&
      // カテゴリでのフィルタリング
      len(filter(vars.products, .category == "electronics")) == 2 &&
      // 在庫ありの商品
      len(filter(vars.products, .stock > 0)) == 4 &&
      // タグによるフィルタリング
      len(filter(vars.products, "apple" in .tags)) == 2 &&
      // 複合条件
      len(filter(vars.products, .category == "books" && "education" in .tags)) == 2

  # マッピングとトランスフォーメーション
  data_transformation:
    desc: データの変換と加工
    test: |
      // 商品名のリスト作成
      map(vars.products, .name)[0] == "iPhone 15" &&
      // 税込価格の計算
      map(vars.products, .price * 1.1)[0] == 1098.9 &&
      // 価格のみのマッピング
      map(vars.products, .price)[2] == 2499 &&
      // 在庫状態のマッピング
      map(vars.products, .stock > 0)[2] == false &&
      // フィルタリング後のマッピング
      len(map(filter(vars.products, .category == "electronics"), .name)) == 2 &&
      map(filter(vars.products, .category == "electronics"), .price)[1] == 2499

  # all、any、sum等の集約関数
  aggregation_functions:
    desc: 集約関数の使用例
    test: |
      // すべての商品が在庫ありかチェック
      all(vars.products, .stock > 0) == false &&
      // いずれかの商品が在庫切れかチェック
      any(vars.products, .stock == 0) == true &&
      // すべての商品が10ドル以上かチェック
      all(vars.products, .price >= 10) == true &&
      // 在庫価値の合計
      sum(map(vars.products, .price * .stock)) == 63450 &&
      // 平均価格の計算
      round(sum(map(vars.products, .price)) / len(vars.products)) == 727

  # ネストしたデータ構造の操作
  nested_operations:
    desc: 複雑なネスト構造の処理
    test: |
      // タグにプログラミングを含む商品の数
      len(filter(vars.products, "programming" in .tags)) == 2 &&
      // タグ数の確認（flattenサポートされていない）
      // len(flatten(map(vars.products, .tags))) == 14 &&
      // カテゴリごとのフィルタリング
      len(filter(vars.products, .category == "electronics")) == 2 &&
      len(filter(vars.products, .category == "books")) == 2 &&
      len(filter(vars.products, .category == "accessories")) == 1

  # 文字列の高度な操作
  string_operations:
    desc: 文字列処理の応用
    test: |
      // フォーマットされた識別子の作成
      map(vars.products, lower(.category) + "_" + replace(lower(.name), " ", "_"))[0] == "electronics_iphone_15" &&
      map(vars.products, lower(.category) + "_" + replace(lower(.name), " ", "_"))[1] == "books_programming_book" &&
      // 長い名前の切り詰め
      map(vars.products, len(.name) > 15 ? .name[:12] + "..." : .name)[1] == "Programming ..." &&
      map(vars.products, len(.name) > 15 ? .name[:12] + "..." : .name)[2] == "MacBook Pro" &&
      map(vars.products, len(.name) > 15 ? .name[:12] + "..." : .name)[4] == "Advanced Pro..."

  # 複数の条件を組み合わせた処理
  complex_conditions:
    desc: 複雑な条件の組み合わせ
    test: |
      // おすすめ商品の選定
      len(filter(vars.products, (.category == "electronics" && .price < 1500 && .stock > 0) || (.category == "books" && "programming" in .tags) || (.price < 100 && .stock > 100))) == 4 &&
      // 在庫補充が必要な商品
      len(filter(vars.products, (.stock < 50 && .category == "electronics") || (.stock == 0))) == 1 &&
      // プレミアム商品の選定
      len(filter(vars.products, .price > 500 && ("apple" in .tags || "professional" in .tags))) == 2

  # 動的なプロパティアクセス
  dynamic_access:
    desc: 動的なプロパティアクセス
    loop:
      count: 3
    test: |
      // フィールド名の動的生成
      ["name", "price", "category"][i] != "" &&
      // 動的フィールドアクセス（簡略化）
      (i == 0 ? len(map(vars.products, .name)) == 5 : true) &&
      (i == 1 ? len(map(vars.products, .price)) == 5 : true) &&
      (i == 2 ? len(map(vars.products, .category)) == 5 : true) &&
      // 条件付きフィルタリング
      (i == 1 ? all(filter(vars.products, .price > 100), .price > 100) : true)

  # エラーハンドリングとデフォルト値
  safe_operations:
    desc: 安全な操作とデフォルト値
    test: |
      // 範囲外アクセスの回避
      (len(vars.products) > 10 ? vars.products[10].name : "Not Found") == "Not Found" &&
      // デフォルト価格
      (len(vars.products) > 10 ? vars.products[10].price : 0) == 0 &&
      // 条件付き計算
      (len(vars.products) > 0 ? round(sum(map(vars.products, .price)) / len(vars.products)) : 0) == 727 &&
      // 安全なフィルタリング
      (len(filter(vars.products, .stock > 0)) > 0 ? filter(vars.products, .stock > 0)[0].name : "No items in stock") == "iPhone 15"