desc: 基本的な式の構文例
steps:
  # リテラルと演算子
  literals_and_operators:
    desc: リテラルと基本的な演算子のデモ
    test: |
      # 数値演算
      42 == 42 &&
      10 + 5 == 15 &&
      20 - 8 == 12 &&
      3 * 4 == 12 &&
      15 / 3 == 5 &&
      17 % 5 == 2 &&
      
      # 浮動小数点
      3.14 < 4 &&
      2.5 * 2 == 5.0 &&
      
      # 文字列操作
      "hello" + " world" == "hello world" &&
      "runn" * 2 == "runnrunn" &&
      len("test") == 4 &&
      
      # ブール演算
      true && !false &&
      true || false &&
      !(false && true)

  # 配列操作
  array_operations:
    desc: 配列の基本操作
    test: |
      # 配列の作成とアクセス
      [1, 2, 3][0] == 1 &&
      [1, 2, 3][2] == 3 &&
      len([1, 2, 3]) == 3 &&
      
      # 配列の結合
      [1, 2] + [3, 4] == [1, 2, 3, 4] &&
      
      # 要素の存在確認
      2 in [1, 2, 3] &&
      !(5 in [1, 2, 3]) &&
      
      # スライス
      [1, 2, 3, 4, 5][1:3] == [2, 3] &&
      [1, 2, 3, 4, 5][:2] == [1, 2] &&
      [1, 2, 3, 4, 5][3:] == [4, 5]

  # マップ（辞書）操作
  map_operations:
    desc: マップの基本操作
    test: |
      # マップの作成とアクセス
      {"name": "alice", "age": 30}.name == "alice" &&
      {"name": "alice", "age": 30}["age"] == 30 &&
      
      # キーの存在確認
      "name" in {"name": "alice", "age": 30} &&
      !("email" in {"name": "alice", "age": 30}) &&
      
      # ネストしたマップ
      {"user": {"name": "bob", "role": "admin"}}.user.role == "admin"

  # 比較演算子
  comparison_operators:
    desc: 様々な比較演算子
    test: |
      # 数値の比較
      10 > 5 &&
      100 >= 100 &&
      50 <= 100 &&
      20 < 30 &&
      
      # 文字列の比較（辞書順）
      "apple" < "banana" &&
      "zebra" > "alpha" &&
      
      # 等価性と非等価性
      "test" == "test" &&
      100 != 99 &&
      [1, 2] == [1, 2] &&
      {"a": 1} != {"b": 1} &&
      
      # 包含チェック
      "run" in "running" &&
      "test" in "testing" &&
      !("xyz" in "abcdef")

  # 型の混在と型安全
  type_safety:
    desc: 型に関する挙動
    test: |
      # 異なる型の比較
      "10" != 10 &&  # 文字列と数値は異なる
      true != 1 &&    # ブール値と数値は異なる
      false != 0 &&
      
      # null値の扱い
      null == null &&
      null != 0 &&
      null != "" &&
      null != false

  # 論理演算の短絡評価
  short_circuit:
    desc: 論理演算の短絡評価
    test: |
      # ANDの短絡評価（最初がfalseなら後続は評価されない）
      (false && (1/0 == 0)) == false &&
      
      # ORの短絡評価（最初がtrueなら後続は評価されない）
      (true || (1/0 == 0)) == true &&
      
      # 実用的な例：存在確認してからアクセス
      ({"key": "value"} != null && {"key": "value"}.key == "value")