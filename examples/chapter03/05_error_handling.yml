desc: エラーハンドリングと安全な式の例
vars:
  # テスト用のデータ（一部が不完全）
  testData:
    validUser:
      id: 1
      name: "Alice"
      email: "alice@example.com"
      profile:
        age: 30
        location: "Tokyo"
    incompleteUser:
      id: 2
      name: "Bob"
      # emailが欠落
      # profileが欠落
    users:
      - id: 1
        name: "User1"
        active: true
      - id: 2
        name: "User2"
        active: false
      - id: 3
        name: "User3"
        active: true
    emptyArray: []
    nullValue: null
    
steps:
  # null値の安全な処理
  null_safe_access:
    desc: null値に対する安全なアクセス
    test: |
      // デフォルト値の処理（三項演算子を使用）
      ("email" in vars.testData.incompleteUser ? vars.testData.incompleteUser.email : "no-email@example.com") == "no-email@example.com" &&
      // プロフィールの存在確認
      ("profile" in vars.testData.incompleteUser ? vars.testData.incompleteUser.profile.age : 0) == 0 &&
      // 有効なユーザーのプロフィール
      ("profile" in vars.testData.validUser && "location" in vars.testData.validUser.profile ? vars.testData.validUser.profile.location : "Unknown") == "Tokyo" &&
      // null値のチェック
      (vars.testData.nullValue != null ? vars.testData.nullValue : "default value") == "default value"

  # 配列の境界チェック
  array_bounds_check:
    desc: 配列アクセスの安全性確保
    test: |
      // 配列の長さチェック
      len(vars.testData.users) == 3 &&
      // 範囲内アクセス
      (len(vars.testData.users) > 0 ? vars.testData.users[0].name : "No users") == "User1" &&
      // 範囲外アクセスの回避
      (len(vars.testData.users) > 10 ? vars.testData.users[10].name : "Index out of bounds") == "Index out of bounds" &&
      // 空配列のチェック
      (len(vars.testData.emptyArray) > 0 ? vars.testData.emptyArray[0] : "Empty array") == "Empty array"

  # フィルタリング結果の安全な処理
  safe_filtering:
    desc: フィルタリング結果が空の場合の処理
    test: |
      // アクティブユーザーのフィルタリング
      len(filter(vars.testData.users, .active)) == 2 &&
      // 存在しない条件でのフィルタリング
      len(filter(vars.testData.users, .name == "NonExistent")) == 0 &&
      // フィルタ結果の安全なアクセス
      (len(filter(vars.testData.users, .active)) > 0 ? filter(vars.testData.users, .active)[0].name : "No active users") == "User1" &&
      (len(filter(vars.testData.users, .name == "NonExistent")) > 0 ? filter(vars.testData.users, .name == "NonExistent")[0].name : "Not found") == "Not found"

  # 計算エラーの回避
  safe_calculations:
    desc: ゼロ除算などの計算エラーを回避
    test: |
      // ゼロ除算の回避
      (len(vars.testData.users) > 0 ? 100 / len(vars.testData.users) : 0) > 0 &&
      (len(vars.testData.emptyArray) > 0 ? 100 / len(vars.testData.emptyArray) : -1) == -1 &&
      // 平均値の安全な計算
      (len(vars.testData.users) > 0 ? sum(map(vars.testData.users, .id)) / len(vars.testData.users) : 0) == 2

  # 条件付き処理の連鎖
  conditional_chain:
    desc: 複数の条件を連鎖させた安全な処理
    test: |
      // ユーザーの検証と処理
      ("email" in vars.testData.validUser ? 
        (len(vars.testData.validUser.email) > 0 ? 
          vars.testData.validUser.email : 
          "empty email") : 
        "no email field") == "alice@example.com" &&
      // 不完全なユーザーの検証
      ("email" in vars.testData.incompleteUser ? 
        (len(vars.testData.incompleteUser.email) > 0 ? 
          vars.testData.incompleteUser.email : 
          "empty email") : 
        "no email field") == "no email field"

  # エラー状態の検出と処理
  error_detection:
    desc: エラー状態を検出して適切に処理
    test: |
      // 必須フィールドの検証
      ("id" in vars.testData.validUser && "name" in vars.testData.validUser) == true &&
      ("id" in vars.testData.incompleteUser && "name" in vars.testData.incompleteUser) == true &&
      ("email" in vars.testData.incompleteUser) == false &&
      // エラー状態の分類
      ("email" in vars.testData.incompleteUser ? "valid" : "missing_email") == "missing_email" &&
      ("profile" in vars.testData.incompleteUser ? "has_profile" : "no_profile") == "no_profile"

  # 複雑なデータ構造での安全なナビゲーション
  safe_navigation:
    desc: ネストした構造を安全に辿る
    test: |
      // 存在するパスの検証
      ("profile" in vars.testData.validUser && 
       "location" in vars.testData.validUser.profile) == true &&
      // 存在しないパスの検証
      ("profile" in vars.testData.incompleteUser) == false &&
      // 条件付きアクセス
      ("profile" in vars.testData.validUser ? 
        vars.testData.validUser.profile.age : 
        -1) == 30 &&
      ("profile" in vars.testData.incompleteUser ? 
        vars.testData.incompleteUser.profile.age : 
        -1) == -1