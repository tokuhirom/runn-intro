# testdata/error_handling.yml
desc: エラーハンドリングのベストプラクティス
runners:
  api: https://api.example.com

vars:
  resource_id: "res123"
  complex_data:
    field1: "value1"
    field2: "value2"

steps:
  # 基本的なリトライ
  robust_api_call:
    loop:
      count: 3
      until: current.res.status == 200
      minInterval: 1
      maxInterval: 5
    req:
      api:///unstable-endpoint:
        get:
    test: current.res.status == 200

  # 条件付きエラーハンドリング
  conditional_retry:
    loop:
      count: 5
      until: |
        current.res.status == 200 || 
        current.res.status == 404  # 404は正常として扱う
      minInterval: 2
    req:
      api:///resource/{{ vars.resource_id }}:
        get:
    test: current.res.status in [200, 404]

  # エラー情報の詳細記録
  detailed_error_logging:
    req:
      api:///complex-operation:
        post:
          body:
            application/json: "{{ vars.complex_data }}"
    test: true  # エラーでも続行
    dump:
      error_details: |
        current.res.status >= 400 ? {
          "status": current.res.status,
          "error_message": current.res.body.message ?? "Unknown error",
          "request_id": current.res.headers["X-Request-ID"],
          "timestamp": time("now"),
          "input_data_size": len(toJSON(vars.complex_data))
        } : null