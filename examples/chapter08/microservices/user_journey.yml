# testdata/microservices/user_journey.yml
desc: マイクロサービス間の連携テスト
runners:
  user_service: https://user-service.example.com
  product_service: https://product-service.example.com
  order_service: https://order-service.example.com
  notification_service: https://notification-service.example.com
  user_db: postgres://user:pass@localhost:5432/userdb?sslmode=disable
  order_db: postgres://user:pass@localhost:5433/orderdb?sslmode=disable

steps:
  # ユーザーサービス：ユーザー作成
  create_user:
    req:
      user_service:///users:
        post:
          body:
            application/json:
              name: "{{ faker.name() }}"
              email: "{{ faker.email() }}"
    test: current.res.status == 201

  # 商品サービス：商品情報取得
  get_products:
    req:
      product_service:///products:
        get:
          query:
            limit: 5
    test: |
      current.res.status == 200 &&
      len(current.res.body.products) > 0

  # 注文サービス：注文作成
  create_order:
    req:
      order_service:///orders:
        post:
          body:
            application/json:
              user_id: "{{ steps.create_user.res.body.id }}"
              items:
                - product_id: "{{ steps.get_products.res.body.products[0].id }}"
                  quantity: 1
    test: current.res.status == 201

  # 通知サービス：通知送信確認
  verify_notification:
    loop:
      count: 5
      until: len(current.res.body.notifications) > 0
      minInterval: 1
    req:
      notification_service:///notifications:
        get:
          query:
            user_id: "{{ steps.create_user.res.body.id }}"
            type: "order_created"
    test: |
      current.res.status == 200 &&
      len(current.res.body.notifications) > 0

  # データ整合性確認
  verify_data_consistency:
    db:
      user_db:///:
        query: SELECT * FROM users WHERE id = $1
        params:
          - "{{ steps.create_user.res.body.id }}"
    test: len(current.rows) == 1

  verify_order_data:
    db:
      order_db:///:
        query: SELECT * FROM orders WHERE user_id = $1
        params:
          - "{{ steps.create_user.res.body.id }}"
    test: |
      len(current.rows) == 1 &&
      current.rows[0].status == "created"