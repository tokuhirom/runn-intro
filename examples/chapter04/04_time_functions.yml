desc: 時間処理関数の例
vars:
  # テスト用の時刻データ
  timestamps:
    iso8601: "2024-01-15T10:30:00Z"
    rfc3339: "2024-01-15T10:30:00+09:00"
    custom: "2024/01/15 10:30:00"
    date_only: "2024-01-15"
    time_only: "10:30:00"
  
  # 様々なフォーマット
  formats:
    iso: "2006-01-02T15:04:05Z07:00"
    japanese: "2006年01月02日 15時04分05秒"
    us: "01/02/2006 3:04 PM"
    simple: "2006-01-02"

steps:
  # 現在時刻の取得と基本操作
  current_time_operations:
    desc: 現在時刻の取得と基本的な操作
    dump: |
      {
        "now": time.now(),
        "now_unix": time.unix(time.now()),
        "now_formatted": time.format(time.now(), "2006-01-02 15:04:05"),
        "today": time.format(time.now(), "2006-01-02"),
        "current_year": int(time.format(time.now(), "2006")),
        "current_month": time.format(time.now(), "January"),
        "current_weekday": time.format(time.now(), "Monday"),
        "timezone": time.format(time.now(), "MST"),
        "is_weekend": time.format(time.now(), "Mon") in ["Sat", "Sun"]
      }
    test: |
      # 現在時刻が正しく取得できている
      current.now != null &&
      current.now_unix > 0 &&
      current.current_year >= 2024 &&
      len(current.today) == 10 &&
      current.current_month in [
        "January", "February", "March", "April", "May", "June",
        "July", "August", "September", "October", "November", "December"
      ]

  # 時刻のパースとフォーマット
  parse_and_format:
    desc: 様々な形式の時刻のパースとフォーマット
    dump: |
      # ISO8601形式のパース
      let iso_time = time.parse(vars.timestamps.iso8601, time.RFC3339);
      
      # カスタム形式のパース
      let custom_time = time.parse(vars.timestamps.custom, "2006/01/02 15:04:05");
      
      # 日付のみのパース（時刻は00:00:00になる）
      let date_only = time.parse(vars.timestamps.date_only, "2006-01-02");
      
      {
        "iso_parsed": iso_time,
        "custom_parsed": custom_time,
        "date_parsed": date_only,
        "formatted_examples": {
          "rfc3339": time.format(iso_time, time.RFC3339),
          "japanese": time.format(iso_time, vars.formats.japanese),
          "us_style": time.format(iso_time, vars.formats.us),
          "unix_timestamp": time.unix(iso_time),
          "year_only": time.format(iso_time, "2006"),
          "month_day": time.format(iso_time, "Jan 02"),
          "time_only": time.format(iso_time, "15:04:05"),
          "kitchen": time.format(iso_time, time.Kitchen)
        }
      }
    test: |
      current.iso_parsed != null &&
      current.formatted_examples.rfc3339 == "2024-01-15T10:30:00Z" &&
      current.formatted_examples.japanese == "2024年01月15日 10時30分00秒" &&
      current.formatted_examples.year_only == "2024" &&
      current.formatted_examples.kitchen == "10:30AM"

  # 時間の計算と演算
  time_calculations:
    desc: 時間の加算、減算、差分計算
    dump: |
      let base_time = time.parse("2024-01-15T10:00:00Z", time.RFC3339);
      
      {
        "base": time.format(base_time, time.RFC3339),
        "add_operations": {
          "plus_1_hour": time.format(time.add(base_time, time.hour), time.RFC3339),
          "plus_30_minutes": time.format(time.add(base_time, time.minute * 30), time.RFC3339),
          "plus_1_day": time.format(time.add(base_time, time.day), time.RFC3339),
          "plus_1_week": time.format(time.add(base_time, time.day * 7), time.RFC3339),
          "plus_1_month": time.format(time.add(base_time, time.day * 30), time.RFC3339)
        },
        "subtract_operations": {
          "minus_2_hours": time.format(time.add(base_time, -time.hour * 2), time.RFC3339),
          "minus_15_minutes": time.format(time.add(base_time, -time.minute * 15), time.RFC3339),
          "minus_3_days": time.format(time.add(base_time, -time.day * 3), time.RFC3339)
        },
        "duration_calculations": {
          "hours_in_day": time.day / time.hour,
          "minutes_in_hour": time.hour / time.minute,
          "seconds_in_minute": time.minute / time.second
        }
      }
    test: |
      current.add_operations.plus_1_hour == "2024-01-15T11:00:00Z" &&
      current.add_operations.plus_30_minutes == "2024-01-15T10:30:00Z" &&
      current.add_operations.plus_1_day == "2024-01-16T10:00:00Z" &&
      current.subtract_operations.minus_2_hours == "2024-01-15T08:00:00Z" &&
      current.duration_calculations.hours_in_day == 24 &&
      current.duration_calculations.minutes_in_hour == 60

  # 時間の比較
  time_comparisons:
    desc: 時刻の比較操作
    dump: |
      let time1 = time.parse("2024-01-15T10:00:00Z", time.RFC3339);
      let time2 = time.parse("2024-01-15T15:00:00Z", time.RFC3339);
      let time3 = time.parse("2024-01-14T10:00:00Z", time.RFC3339);
      
      {
        "time1": time.format(time1, "2006-01-02 15:04:05"),
        "time2": time.format(time2, "2006-01-02 15:04:05"),
        "time3": time.format(time3, "2006-01-02 15:04:05"),
        "comparisons": {
          "time1_before_time2": time.before(time1, time2),
          "time2_after_time1": time.after(time2, time1),
          "time1_equals_time1": time.equal(time1, time1),
          "time3_before_time1": time.before(time3, time1),
          "duration_1_to_2": time.sub(time2, time1) / time.hour,
          "duration_3_to_1": time.sub(time1, time3) / time.hour
        },
        "relative_checks": {
          "is_past": time.before(time1, time.now()),
          "is_today": time.format(time.now(), "2006-01-02") == time.format(time1, "2006-01-02"),
          "same_month": time.format(time1, "2006-01") == time.format(time2, "2006-01")
        }
      }
    test: |
      current.comparisons.time1_before_time2 == true &&
      current.comparisons.time2_after_time1 == true &&
      current.comparisons.time1_equals_time1 == true &&
      current.comparisons.duration_1_to_2 == 5 &&
      current.comparisons.duration_3_to_1 == 24 &&
      current.relative_checks.same_month == true

  # 実用的な時間処理
  practical_time_usage:
    desc: 実際のユースケースでの時間処理
    dump: |
      # 営業時間のチェック
      let now = time.now();
      let current_hour = int(time.format(now, "15"));
      let is_business_hours = current_hour >= 9 && current_hour < 18;
      
      # 期限のチェック
      let deadline = time.parse("2024-12-31T23:59:59Z", time.RFC3339);
      let days_until_deadline = time.sub(deadline, now) / time.day;
      
      # 定期実行のスケジュール
      let last_run = time.parse("2024-01-15T00:00:00Z", time.RFC3339);
      let next_run = time.add(last_run, time.day * 7);  # 週次実行
      let should_run = time.after(now, next_run);
      
      # ログのタイムスタンプ
      let log_entries = [
        {"message": "Start", "time": time.add(now, -time.hour * 2)},
        {"message": "Processing", "time": time.add(now, -time.hour)},
        {"message": "Complete", "time": now}
      ];
      
      {
        "business_hours": {
          "current_hour": current_hour,
          "is_open": is_business_hours,
          "next_open": current_hour < 9 ? 
            "Today at 9:00" : 
            current_hour >= 18 ? "Tomorrow at 9:00" : "Currently open"
        },
        "deadline_tracking": {
          "deadline": time.format(deadline, "2006-01-02"),
          "days_remaining": int(days_until_deadline),
          "is_urgent": days_until_deadline < 7,
          "status": days_until_deadline < 0 ? "Overdue" : 
                   days_until_deadline < 7 ? "Urgent" :
                   days_until_deadline < 30 ? "Soon" : "On track"
        },
        "scheduled_task": {
          "last_run": time.format(last_run, "2006-01-02 15:04:05"),
          "next_run": time.format(next_run, "2006-01-02 15:04:05"),
          "should_run_now": should_run
        },
        "log_summary": map(log_entries, {
          {
            "message": .message,
            "timestamp": time.format(.time, "15:04:05"),
            "elapsed": time.sub(now, .time) / time.minute
          }
        })
      }
    test: |
      current.business_hours.current_hour >= 0 &&
      current.business_hours.current_hour < 24 &&
      current.deadline_tracking.days_remaining > 0 &&
      len(current.log_summary) == 3 &&
      current.log_summary[2].message == "Complete"

  # 時間範囲とフィルタリング
  time_ranges:
    desc: 時間範囲の処理とデータのフィルタリング
    dump: |
      # イベントデータ
      let events = [
        {"name": "Event A", "date": "2024-01-10T10:00:00Z"},
        {"name": "Event B", "date": "2024-01-15T14:00:00Z"},
        {"name": "Event C", "date": "2024-01-20T09:00:00Z"},
        {"name": "Event D", "date": "2024-01-25T16:00:00Z"},
        {"name": "Event E", "date": "2024-02-01T11:00:00Z"}
      ];
      
      # 時間範囲の定義
      let range_start = time.parse("2024-01-14T00:00:00Z", time.RFC3339);
      let range_end = time.parse("2024-01-21T00:00:00Z", time.RFC3339);
      
      # イベントのフィルタリング
      let events_in_range = filter(events, {
        let event_time = time.parse(.date, time.RFC3339);
        time.after(event_time, range_start) && time.before(event_time, range_end)
      });
      
      # 月ごとのグループ化
      let events_by_month = groupBy(events, {
        time.format(time.parse(.date, time.RFC3339), "2006-01")
      });
      
      {
        "range": {
          "start": time.format(range_start, "2006-01-02"),
          "end": time.format(range_end, "2006-01-02"),
          "duration_days": time.sub(range_end, range_start) / time.day
        },
        "filtered_events": map(events_in_range, {
          {
            "name": .name,
            "date": time.format(time.parse(.date, time.RFC3339), "Jan 02 15:04")
          }
        }),
        "monthly_summary": map(items(events_by_month), {
          {
            "month": .key,
            "count": len(.value),
            "events": map(.value, {.name})
          }
        })
      }
    test: |
      current.range.duration_days == 7 &&
      len(current.filtered_events) == 2 &&
      current.filtered_events[0].name == "Event B" &&
      len(current.monthly_summary) == 2

  # タイムゾーン処理（シミュレーション）
  timezone_handling:
    desc: タイムゾーンを考慮した時刻処理
    dump: |
      # UTC時刻
      let utc_time = time.parse("2024-01-15T15:00:00Z", time.RFC3339);
      
      # 各地域の時刻をシミュレート（時差を加算）
      let timezones = {
        "UTC": utc_time,
        "Tokyo": time.add(utc_time, time.hour * 9),      # UTC+9
        "London": time.add(utc_time, time.hour * 0),     # UTC+0
        "NewYork": time.add(utc_time, -time.hour * 5),   # UTC-5
        "LosAngeles": time.add(utc_time, -time.hour * 8) # UTC-8
      };
      
      {
        "utc": time.format(utc_time, "15:04:05"),
        "local_times": map(items(timezones), {
          {
            "city": .key,
            "time": time.format(.value, "15:04:05"),
            "date": time.format(.value, "2006-01-02"),
            "offset_hours": time.sub(.value, utc_time) / time.hour
          }
        }),
        "same_moment": all(values(timezones), {
          # 実際には異なる値だが、概念的には同じ瞬間を表す
          true
        })
      }
    test: |
      current.utc == "15:00:00" &&
      len(current.local_times) == 5 &&
      current.same_moment == true