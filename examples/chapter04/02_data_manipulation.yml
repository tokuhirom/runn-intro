desc: データ操作関数の例
vars:
  # サンプルデータ
  users:
    - id: 1
      name: "Alice"
      email: "alice@example.com"
      age: 30
      department: "Engineering"
      salary: 80000
      active: true
      created_at: "2023-01-15T10:00:00Z"
      metadata:
        last_login: "2024-02-01T09:00:00Z"
        preferences:
          theme: "dark"
          language: "ja"
    - id: 2
      name: "Bob"
      email: "bob@example.com"
      age: 25
      department: "Sales"
      salary: 60000
      active: true
      created_at: "2023-06-20T14:30:00Z"
      metadata:
        last_login: "2024-02-02T10:30:00Z"
        preferences:
          theme: "light"
          language: "en"
    - id: 3
      name: "Charlie"
      email: "charlie@example.com"
      age: 35
      department: "Engineering"
      salary: 90000
      active: false
      created_at: "2022-11-10T08:00:00Z"
      metadata:
        last_login: "2023-12-15T16:00:00Z"
        preferences:
          theme: "auto"
          language: "en"
    - id: 4
      name: "Diana"
      email: "diana@example.com"
      age: 28
      department: "HR"
      salary: 65000
      active: true
      created_at: "2023-03-25T11:00:00Z"
      metadata:
        last_login: "2024-02-02T08:00:00Z"
        preferences:
          theme: "light"
          language: "es"

steps:
  # pick関数の使用例
  pick_example:
    desc: 必要なフィールドのみを抽出
    dump: |
      {
        "public_info": map(vars.users, {
          pick(., ["id", "name", "email", "department"])
        }),
        "contact_list": map(vars.users, {
          pick(., ["name", "email"])
        }),
        "id_mapping": map(vars.users, {
          pick(., ["id", "name"])
        })
      }
    test: |
      # 抽出されたデータに指定したフィールドのみが含まれる
      len(current.public_info[0]) == 4 &&
      !("salary" in current.public_info[0]) &&
      !("active" in current.public_info[0]) &&
      len(current.contact_list[0]) == 2 &&
      current.id_mapping[0].id == 1 &&
      current.id_mapping[0].name == "Alice"

  # omit関数の使用例
  omit_example:
    desc: 不要なフィールドを除外
    dump: |
      {
        "without_sensitive": map(vars.users, {
          omit(., ["salary", "metadata"])
        }),
        "minimal_info": map(vars.users, {
          omit(., ["salary", "metadata", "created_at", "active"])
        }),
        "for_export": omit(vars.users[0], ["metadata.preferences"])
      }
    test: |
      # 除外されたフィールドが存在しない
      !("salary" in current.without_sensitive[0]) &&
      !("metadata" in current.without_sensitive[0]) &&
      "name" in current.without_sensitive[0] &&
      "email" in current.without_sensitive[0] &&
      len(current.minimal_info[0]) == 4

  # merge関数の使用例
  merge_example:
    desc: オブジェクトのマージ
    dump: |
      {
        "defaults": {
          "role": "user",
          "permissions": ["read"],
          "active": true,
          "settings": {
            "notifications": true,
            "newsletter": false
          }
        },
        "user_updates": {
          "role": "admin",
          "permissions": ["read", "write", "delete"],
          "settings": {
            "notifications": false
          }
        },
        "merged": merge(current.defaults, current.user_updates),
        "multi_merge": merge(
          {"a": 1, "b": 2},
          {"b": 3, "c": 4},
          {"c": 5, "d": 6}
        )
      }
    test: |
      # 後のオブジェクトの値が優先される
      current.merged.role == "admin" &&
      len(current.merged.permissions) == 3 &&
      current.merged.active == true &&  # defaultsから継承
      current.merged.settings.notifications == false &&  # 上書きされた
      current.merged.settings.newsletter == false &&  # defaultsから継承
      # 複数オブジェクトのマージ
      current.multi_merge == {"a": 1, "b": 3, "c": 5, "d": 6}

  # intersect関数の使用例
  intersect_example:
    desc: 共通部分の抽出
    dump: |
      {
        "list1": ["apple", "banana", "orange", "grape"],
        "list2": ["banana", "grape", "melon", "apple"],
        "list3": ["grape", "apple", "kiwi"],
        "common_fruits": intersect(current.list1, current.list2, current.list3),
        "dept_skills": {
          "engineering": ["Go", "Python", "Docker", "K8s"],
          "data": ["Python", "SQL", "Docker", "Spark"],
          "devops": ["Docker", "K8s", "Terraform", "Go"]
        },
        "common_skills": intersect(
          current.dept_skills.engineering,
          current.dept_skills.data,
          current.dept_skills.devops
        ),
        "object_intersect": intersect(
          {"a": 1, "b": 2, "c": 3},
          {"b": 2, "c": 3, "d": 4},
          {"c": 3, "d": 4, "e": 5}
        )
      }
    test: |
      current.common_fruits == ["apple", "grape"] &&
      current.common_skills == ["Docker"] &&
      current.object_intersect == {"c": 3}

  # groupBy関数の使用例
  groupBy_example:
    desc: データのグループ化
    dump: |
      {
        "by_department": groupBy(vars.users, {.department}),
        "by_active_status": groupBy(vars.users, {.active}),
        "by_theme": groupBy(vars.users, {.metadata.preferences.theme}),
        "by_age_group": groupBy(vars.users, {
          .age < 30 ? "young" : .age < 35 ? "middle" : "senior"
        }),
        "department_stats": map(
          items(groupBy(vars.users, {.department})),
          {
            "department": .key,
            "count": len(.value),
            "avg_salary": sum(map(.value, {.salary})) / len(.value),
            "members": map(.value, {.name})
          }
        )
      }
    test: |
      len(current.by_department.Engineering) == 2 &&
      len(current.by_department.Sales) == 1 &&
      len(current.by_department.HR) == 1 &&
      len(current.by_active_status.true) == 3 &&
      len(current.by_active_status.false) == 1 &&
      len(current.by_theme.dark) == 1 &&
      len(current.by_theme.light) == 2 &&
      len(current.by_age_group.young) == 2 &&
      current.department_stats[0].department in ["Engineering", "Sales", "HR"]

  # flatten関数の使用例
  flatten_example:
    desc: 配列の平坦化
    dump: |
      {
        "nested_arrays": [[1, 2], [3, 4], [5]],
        "flattened": flatten(current.nested_arrays),
        "deep_nested": [[[1, 2]], [[3]], [4, [5, 6]]],
        "flattened_deep": flatten(current.deep_nested),
        "user_languages": map(vars.users, {[.metadata.preferences.language]}),
        "all_languages": flatten(current.user_languages),
        "department_users": map(
          items(groupBy(vars.users, {.department})),
          {map(.value, {.name})}
        ),
        "all_users_flat": flatten(current.department_users)
      }
    test: |
      current.flattened == [1, 2, 3, 4, 5] &&
      len(current.flattened) == 5 &&
      current.flattened_deep == [[1, 2], [3], 4, [5, 6]] &&
      len(current.all_languages) == 4 &&
      len(current.all_users_flat) == 4

  # unique関数の使用例
  unique_example:
    desc: 重複の除去
    dump: |
      {
        "departments": map(vars.users, {.department}),
        "unique_departments": unique(current.departments),
        "all_languages": map(vars.users, {.metadata.preferences.language}),
        "unique_languages": unique(current.all_languages),
        "numbers": [1, 2, 2, 3, 3, 3, 4, 4, 4, 4],
        "unique_numbers": unique(current.numbers),
        "active_statuses": unique(map(vars.users, {.active})),
        "age_ranges": unique(map(vars.users, {
          .age < 30 ? "20s" : .age < 40 ? "30s" : "40s+"
        }))
      }
    test: |
      len(current.unique_departments) == 3 &&
      current.unique_departments in [
        ["Engineering", "Sales", "HR"],
        ["Sales", "Engineering", "HR"],
        ["Engineering", "HR", "Sales"],
        ["Sales", "HR", "Engineering"],
        ["HR", "Engineering", "Sales"],
        ["HR", "Sales", "Engineering"]
      ] &&
      len(current.unique_languages) == 3 &&
      current.unique_numbers == [1, 2, 3, 4] &&
      len(current.active_statuses) == 2 &&
      len(current.age_ranges) == 2

  # 複合的なデータ操作
  complex_manipulation:
    desc: 複数の関数を組み合わせた処理
    dump: |
      # アクティブなエンジニアリング部門のユーザーを処理
      let active_engineers = filter(vars.users, {
        .active && .department == "Engineering"
      });
      
      # 給与情報を除外し、追加情報をマージ
      let processed_users = map(active_engineers, {
        merge(
          omit(., ["salary", "created_at"]),
          {
            "display_name": .name + " (" + .department + ")",
            "last_active": .metadata.last_login,
            "years_of_service": 2024 - int(substr(.created_at, 0, 4))
          }
        )
      });
      
      # 部門ごとの統計情報を生成
      let dept_summary = map(
        items(groupBy(vars.users, {.department})),
        {
          "department": .key,
          "total_employees": len(.value),
          "active_employees": len(filter(.value, {.active})),
          "avg_age": sum(map(.value, {.age})) / len(.value),
          "languages_used": unique(map(.value, {.metadata.preferences.language}))
        }
      );
      
      {
        "active_engineers": active_engineers,
        "processed_users": processed_users,
        "dept_summary": dept_summary,
        "company_overview": {
          "total_departments": len(unique(map(vars.users, {.department}))),
          "total_active": len(filter(vars.users, {.active})),
          "all_themes": unique(map(vars.users, {.metadata.preferences.theme}))
        }
      }
    test: |
      len(current.active_engineers) == 1 &&
      current.active_engineers[0].name == "Alice" &&
      !("salary" in current.processed_users[0]) &&
      current.processed_users[0].display_name == "Alice (Engineering)" &&
      len(current.dept_summary) == 3 &&
      current.company_overview.total_departments == 3 &&
      current.company_overview.total_active == 3 &&
      len(current.company_overview.all_themes) == 3