desc: 文字列処理関数の例
vars:
  # テスト用の文字列データ
  sampleTexts:
    greeting: "  Hello, World!  "
    email: "user@example.com"
    filename: "document_v2_final.txt"
    url: "https://api.example.com/v1/users?page=1&limit=10"
    csv: "name,age,city\nAlice,30,Tokyo\nBob,25,Osaka"
    json: '{"name":"Alice","age":30,"skills":["Go","Python"]}'
    markdown: "# Title\n\nThis is **bold** and this is *italic*."
    path: "/home/user/documents/report.pdf"
    sentence: "The quick brown fox jumps over the lazy dog"
    code: "func main() { fmt.Println(\"Hello, World!\") }"

steps:
  # 基本的な文字列変換
  basic_transformations:
    desc: 大文字小文字変換とトリミング
    dump: |
      {
        "original": vars.sampleTexts.greeting,
        "upper": upper(vars.sampleTexts.greeting),
        "lower": lower(vars.sampleTexts.greeting),
        "trim": trim(vars.sampleTexts.greeting),
        "trim_and_upper": upper(trim(vars.sampleTexts.greeting)),
        "title_case": map(
          split(lower(trim(vars.sampleTexts.greeting)), " "),
          {upper(substr(., 0, 1)) + lower(substr(., 1))}
        )
      }
    test: |
      current.upper == "  HELLO, WORLD!  " &&
      current.lower == "  hello, world!  " &&
      current.trim == "Hello, World!" &&
      current.trim_and_upper == "HELLO, WORLD!" &&
      current.title_case == ["Hello,", "World!"]

  # プレフィックスとサフィックスの処理
  prefix_suffix_operations:
    desc: 文字列の前後の処理
    dump: |
      {
        "filename": vars.sampleTexts.filename,
        "without_extension": trimSuffix(vars.sampleTexts.filename, ".txt"),
        "base_name": trimPrefix(
          vars.sampleTexts.filename,
          "document_"
        ),
        "version_only": trimSuffix(
          trimPrefix(vars.sampleTexts.filename, "document_"),
          "_final.txt"
        ),
        "url_path": trimPrefix(vars.sampleTexts.url, "https://api.example.com"),
        "clean_path": trimSuffix(trimPrefix(vars.sampleTexts.path, "/"), ".pdf")
      }
    test: |
      current.without_extension == "document_v2_final" &&
      current.base_name == "v2_final.txt" &&
      current.version_only == "v2" &&
      current.url_path == "/v1/users?page=1&limit=10" &&
      current.clean_path == "home/user/documents/report"

  # 文字列の分割と結合
  split_join_operations:
    desc: 文字列の分割と結合処理
    dump: |
      {
        "email_parts": split(vars.sampleTexts.email, "@"),
        "username": split(vars.sampleTexts.email, "@")[0],
        "domain": split(vars.sampleTexts.email, "@")[1],
        "path_segments": split(trim(vars.sampleTexts.path, "/"), "/"),
        "csv_lines": split(vars.sampleTexts.csv, "\n"),
        "csv_headers": split(split(vars.sampleTexts.csv, "\n")[0], ","),
        "rejoin_path": join(split(trim(vars.sampleTexts.path, "/"), "/"), " > "),
        "make_slug": join(
          split(lower(replace(vars.sampleTexts.sentence, " ", "-")), " "),
          "-"
        )
      }
    test: |
      len(current.email_parts) == 2 &&
      current.username == "user" &&
      current.domain == "example.com" &&
      len(current.path_segments) == 4 &&
      len(current.csv_lines) == 3 &&
      current.csv_headers == ["name", "age", "city"] &&
      current.rejoin_path == "home > user > documents > report.pdf"

  # 文字列の置換
  replace_operations:
    desc: 文字列の置換処理
    dump: |
      {
        "simple_replace": replace(vars.sampleTexts.greeting, "World", "runn"),
        "remove_spaces": replace(vars.sampleTexts.greeting, " ", ""),
        "replace_all_vowels": replaceAll(
          lower(vars.sampleTexts.sentence),
          "[aeiou]",
          "*"
        ),
        "sanitize_filename": replaceAll(
          "my file (v2) [final].txt",
          "[\\[\\]()\\s]",
          "_"
        ),
        "mask_email": replace(
          vars.sampleTexts.email,
          substr(vars.sampleTexts.email, 0, indexOf(vars.sampleTexts.email, "@")),
          "****"
        ),
        "clean_markdown": replaceAll(
          replaceAll(vars.sampleTexts.markdown, "\\*\\*([^*]+)\\*\\*", "$1"),
          "\\*([^*]+)\\*", "$1"
        )
      }
    test: |
      contains(current.simple_replace, "runn") &&
      !contains(current.remove_spaces, " ") &&
      contains(current.mask_email, "****@example.com") &&
      current.sanitize_filename == "my_file__v2___final_.txt"

  # 文字列の検索と検証
  search_validation:
    desc: 文字列の検索と条件確認
    dump: |
      {
        "contains_example": contains(vars.sampleTexts.url, "example.com"),
        "starts_with_https": startsWith(vars.sampleTexts.url, "https://"),
        "ends_with_pdf": endsWith(vars.sampleTexts.path, ".pdf"),
        "email_valid": matches(vars.sampleTexts.email, "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$"),
        "find_position": indexOf(vars.sampleTexts.sentence, "fox"),
        "find_last": lastIndexOf("test_test_test", "test"),
        "url_params": {
          "has_page": contains(vars.sampleTexts.url, "page="),
          "has_limit": contains(vars.sampleTexts.url, "limit="),
          "is_v1_api": contains(vars.sampleTexts.url, "/v1/")
        },
        "code_analysis": {
          "is_go_code": contains(vars.sampleTexts.code, "func") && contains(vars.sampleTexts.code, "fmt."),
          "has_main": contains(vars.sampleTexts.code, "main()"),
          "has_print": matches(vars.sampleTexts.code, "Print(ln)?\\(")
        }
      }
    test: |
      current.contains_example == true &&
      current.starts_with_https == true &&
      current.ends_with_pdf == true &&
      current.email_valid == true &&
      current.find_position == 16 &&
      current.find_last == 10 &&
      current.url_params.has_page == true &&
      current.url_params.has_limit == true &&
      current.code_analysis.is_go_code == true

  # 部分文字列の抽出
  substring_operations:
    desc: 部分文字列の抽出
    dump: |
      {
        "first_5": substr(vars.sampleTexts.sentence, 0, 5),
        "last_5": substr(
          vars.sampleTexts.sentence,
          len(vars.sampleTexts.sentence) - 5,
          5
        ),
        "middle_word": substr(
          vars.sampleTexts.sentence,
          indexOf(vars.sampleTexts.sentence, "brown"),
          5
        ),
        "extract_version": substr(
          vars.sampleTexts.filename,
          indexOf(vars.sampleTexts.filename, "v"),
          2
        ),
        "domain_from_email": substr(
          vars.sampleTexts.email,
          indexOf(vars.sampleTexts.email, "@") + 1,
          len(vars.sampleTexts.email) - indexOf(vars.sampleTexts.email, "@") - 1
        )
      }
    test: |
      current.first_5 == "The q" &&
      current.last_5 == "y dog" &&
      current.middle_word == "brown" &&
      current.extract_version == "v2" &&
      current.domain_from_email == "example.com"

  # エンコーディングとデコーディング
  encoding_decoding:
    desc: 各種エンコーディング処理
    dump: |
      {
        "url_encode": urlencode("hello world & test=1"),
        "url_decode": urldecode("hello%20world%20%26%20test%3D1"),
        "base64_encode": toBase64("Hello, runn!"),
        "base64_decode": fromBase64("SGVsbG8sIHJ1bm4h"),
        "json_object": fromJSON(vars.sampleTexts.json),
        "json_string": toJSON({
          "message": "Hello, World!",
          "timestamp": "2024-01-01T00:00:00Z"
        }),
        "safe_json": fromJSON(vars.sampleTexts.json) ?? {},
        "html_escape": replace(
          replace(replace("<div>Hello & \"World\"</div>", "&", "&amp;"), "<", "&lt;"),
          ">", "&gt;"
        )
      }
    test: |
      current.url_encode == "hello+world+%26+test%3D1" &&
      current.url_decode == "hello world & test=1" &&
      current.base64_encode == "SGVsbG8sIHJ1bm4h" &&
      current.base64_decode == "Hello, runn!" &&
      current.json_object.name == "Alice" &&
      current.json_object.age == 30 &&
      contains(current.json_string, "message") &&
      contains(current.html_escape, "&lt;div&gt;")

  # 高度な文字列処理
  advanced_string_processing:
    desc: 複雑な文字列処理の組み合わせ
    dump: |
      # URLからクエリパラメータを抽出
      let query_string = split(vars.sampleTexts.url, "?")[1];
      let params = map(split(query_string, "&"), {
        let kv = split(., "=");
        {"key": kv[0], "value": kv[1]}
      });
      
      # CSVデータをパース
      let csv_lines = split(vars.sampleTexts.csv, "\n");
      let headers = split(csv_lines[0], ",");
      let csv_data = map(csv_lines[1:], {
        let values = split(., ",");
        merge(
          {"name": values[0]},
          {"age": int(values[1])},
          {"city": values[2]}
        )
      });
      
      # ファイルパスを解析
      let path_parts = {
        "full": vars.sampleTexts.path,
        "directory": join(split(vars.sampleTexts.path, "/")[:-1], "/"),
        "filename": split(vars.sampleTexts.path, "/")[-1],
        "basename": trimSuffix(split(vars.sampleTexts.path, "/")[-1], ".pdf"),
        "extension": split(split(vars.sampleTexts.path, "/")[-1], ".")[-1]
      };
      
      # テキストの統計情報
      let text_stats = {
        "length": len(vars.sampleTexts.sentence),
        "words": len(split(vars.sampleTexts.sentence, " ")),
        "unique_words": len(unique(split(lower(vars.sampleTexts.sentence), " "))),
        "has_numbers": matches(vars.sampleTexts.sentence, "\\d"),
        "word_frequency": groupBy(split(lower(vars.sampleTexts.sentence), " "), {.})
      };
      
      {
        "query_params": params,
        "csv_parsed": csv_data,
        "path_info": path_parts,
        "text_analysis": text_stats
      }
    test: |
      len(current.query_params) == 2 &&
      current.query_params[0].key == "page" &&
      current.query_params[0].value == "1" &&
      len(current.csv_parsed) == 2 &&
      current.csv_parsed[0].name == "Alice" &&
      current.csv_parsed[0].age == 30 &&
      current.path_info.basename == "report" &&
      current.path_info.extension == "pdf" &&
      current.text_analysis.words == 9 &&
      current.text_analysis.unique_words == 8

  # 文字列のフォーマット
  string_formatting:
    desc: 文字列のフォーマット処理
    dump: |
      {
        "padded_number": repeat("0", 5 - len(str(42))) + str(42),
        "centered_text": repeat(" ", 10) + "CENTER" + repeat(" ", 10),
        "separator_line": repeat("-", 40),
        "bullet_list": map(["Item 1", "Item 2", "Item 3"], {
          "• " + .
        }),
        "formatted_table": map([
          {"name": "Alice", "score": 95},
          {"name": "Bob", "score": 87},
          {"name": "Charlie", "score": 92}
        ], {
          .name + repeat(" ", 10 - len(.name)) + " | " + str(.score)
        }),
        "truncate_long": let text = "This is a very long text that should be truncated";
          len(text) > 20 ? substr(text, 0, 17) + "..." : text
      }
    test: |
      current.padded_number == "00042" &&
      len(current.centered_text) == 26 &&
      len(current.separator_line) == 40 &&
      current.bullet_list[0] == "• Item 1" &&
      contains(current.formatted_table[0], "Alice") &&
      contains(current.formatted_table[0], " | ") &&
      current.truncate_long == "This is a very lo..."